//
//  RecordSoundsViewController.swift
//  Pitch Perfect
//
//  Created by yilina on 15/2/12.
//  Copyright (c) 2015å¹´ yilina. All rights reserved.
//

import UIKit
import AVFoundation

class RecordSoundsViewController: UIViewController, AVAudioRecorderDelegate {

    @IBOutlet weak var recordbutton: UIButton!
    @IBOutlet weak var recordingProcess: UILabel!
    @IBOutlet weak var stopbutton: UIButton!
   
    var audioRecorder: AVAudioRecorder!
    var recoredAudio : RecordedAudio!
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    override func viewWillAppear(animated: Bool) {
        //Disapear the stop button
        stopbutton.hidden = true
        //todo: enable the microbutton
        recordbutton.enabled = true
    }

    @IBAction func RecordAudio(sender: UIButton) {
        //Todo: disable the microbutton
        recordbutton.enabled = false
        // TOdo: show the stop button again
        stopbutton.hidden = false
        // Todo: show text "Recording in Progress"
        recordingProcess.hidden = false
        // Todo: record the user's voice
        println("in recordAudio")
        //record the user's voice
        let dirPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as String
        
        let currentDateTime = NSDate()
        let formatter = NSDateFormatter()
        formatter.dateFormat = "ddMMyyyy-HHmmss"
        let recordingName = formatter.stringFromDate(currentDateTime)+".wav"
        let pathArray = [dirPath, recordingName]
        let filePath = NSURL.fileURLWithPathComponents(pathArray)
        println(filePath)
        
        var session = AVAudioSession.sharedInstance()
        session.setCategory(AVAudioSessionCategoryPlayAndRecord, error: nil)
        
        audioRecorder = AVAudioRecorder(URL: filePath, settings: nil, error: nil)
        audioRecorder.delegate = self
        audioRecorder.meteringEnabled = true
        audioRecorder.prepareToRecord()
        audioRecorder.record()
    }
    
    func audioRecorderDidFinishRecording(recorder:AVAudioRecorder!, succesfully flag: Bool){
        if (flag){
                // TODO: SAVE the sound of the user
                recoredAudio = RecordedAudio()
                recoredAudio.filePathUrl = recorder.url
                recoredAudio.title = recorder.url.lastPathComponent
                // todo: move to the next scene via platform sague
                self.performSegueWithIdentifier( "StopRecording" , sender: recoredAudio)
                }
        else    {
                println("Recording was not successful!")
                recordbutton.enabled = true
        }
    }
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if (segue.identifier=="StopRecording"){
            let playSoundsVC:PlaySoundsViewController = segue.destinationViewController as PlaySoundsViewController
            let data = sender as RecordedAudio
            playSoundsVC.receivedAudio = data
        }else{
            println("this filepath is empty")
        }
    
    }

     @IBAction func stopAudio(sender: UIButton) {
        recordingProcess.hidden = true
        // Todo: stop recording audio voice
        audioRecorder.stop()
        var audioSession = AVAudioSession.sharedInstance()
        audioSession.setActive(false, error: nil)
    }
}

